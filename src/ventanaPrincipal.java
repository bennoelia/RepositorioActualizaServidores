/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


//import static com.sun.xml.internal.ws.spi.db.BindingContextFactory.LOGGER;
import java.awt.Cursor;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
//import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author NOE
 */
public class ventanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form ventanaPrincipal
     */
    public ventanaPrincipal() {
        initComponents();
    }
    
    //Se definen Variables
    Object []archivos =  new Object[2];
    Object []archivosACopiar =  new Object[2];
    ModeloTabla2 modelo2;
    ModeloTabla2 modelo3;
        
    //se trabaja con un historial general y uno por corrida
    // se trabaja con el fichero para grabar historial de impresiones
    FileWriter fichero = null;
    PrintWriter pw = null;
    PrintWriter pw2 = null;
    FileWriter ficheroCorrida = null;
       
        
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RutaOrigen = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableServidores = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableArchivos = new javax.swing.JTable();
        jButtonObtenerArchivos = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableArchivosDestino = new javax.swing.JTable();
        jButtonActualizar = new javax.swing.JButton();
        jButtonSalir = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextAreaInfo = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ACtualizaci√≥n de Servidores GTI");
        setExtendedState(6);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        RutaOrigen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                RutaOrigenFocusGained(evt);
            }
        });
        RutaOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RutaOrigenActionPerformed(evt);
            }
        });

        jLabel1.setText("RUTA ORIGEN:");

        jLabel2.setText("SERVIDORES:");

        jTableServidores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableServidores.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableServidores.setAutoscrolls(false);
        jTableServidores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableServidoresMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableServidores);

        jTableArchivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableArchivos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableArchivos.setAutoscrolls(false);
        jScrollPane2.setViewportView(jTableArchivos);

        jButtonObtenerArchivos.setText("Obtener Archivos");
        jButtonObtenerArchivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonObtenerArchivosActionPerformed(evt);
            }
        });

        jTableArchivosDestino.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableArchivosDestino.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane3.setViewportView(jTableArchivosDestino);

        jButtonActualizar.setText("Actualizar Servidores");
        jButtonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarActionPerformed(evt);
            }
        });

        jButtonSalir.setText("Salir");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        jLabel3.setText("CONSOLA INFORMATIVA:");

        jTextAreaInfo.setEditable(false);
        jTextAreaInfo.setColumns(20);
        jTextAreaInfo.setRows(5);
        jScrollPane5.setViewportView(jTextAreaInfo);

        jLabel4.setText("ARCHIVOS ORIGEN:");

        jLabel5.setText("ARCHIVOS DESTINO:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(RutaOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(jButtonSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                            .addComponent(jButtonObtenerArchivos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane5)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(RutaOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonObtenerArchivos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonActualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSalir)))
                .addGap(20, 20, 20)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonActualizar, jButtonObtenerArchivos, jButtonSalir});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*IMPORTANTE C√ìDIGO ORIGINAL DE PRUEBA    
    // PRUEBA
        //File Files=new File(RutaOrigen.getText());
        try {
                Path origenPath = Paths.get(RutaOrigen.getText());
                Path destinoPath = Paths.get(RutaDestino.getText());
                //sobreescribir el fichero de destino si existe y lo copia
                Files.copy(origenPath, destinoPath, StandardCopyOption.REPLACE_EXISTING);
            } catch (FileNotFoundException ex) {
                //LOGGER.log(Level.SEVERE, ex.getMessage());
                 JOptionPane.showMessageDialog(this, "No se encuentra el directorio especificado: ",
                                "Verificar", JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                //LOGGER.log(Level.SEVERE, ex.getMessage());
                System.err.println(ex);
                JOptionPane.showMessageDialog(this, "ERROR: ".concat(ex.getMessage()),
                                "Verificar", JOptionPane.ERROR_MESSAGE);
            }
    
    */
    
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
       
    }//GEN-LAST:event_formWindowActivated

    private void obtieneServidores(){
    //---------------INICIO TABLA---------------------------------------------
        ModeloTabla modelo=new ModeloTabla();
        FileReader fr =null;
        modelo.addColumn("Servidor");
        modelo.addColumn("Actualizar");
        Object []servidores =  new Object[2];
        //Lee Servidores desde Atchivo txt
        try {
            // Apertura del fichero y creacion de BufferedReader para poder
            // hacer una lectura comoda (disponer del metodo readLine()).
            //File archivo = new File ( "D:/ActualizaServidores/Servidores.txt");
            File archivo = new File ( obtieneRutaIniciar ("RUTA SERVIDORES"));
            //System.out.println(archivo);
            fr = new FileReader (archivo);
            BufferedReader br = new BufferedReader(fr);
            // Lectura del fichero
            String linea;
            while((linea=br.readLine())!=null)
            { 
                //System.out.println(linea);
                servidores[0] = linea;
                servidores[1]=true;
                modelo.addRow(servidores);
            }
            }
        catch(Exception e){
           e.printStackTrace();
        }finally{
           // En el finally cerramos el fichero, para asegurarnos
           // que se cierra tanto si todo va bien como si salta 
           // una excepcion.
           try{
              if( null != fr ){
                 fr.close();
              }
           }catch (Exception e2){
              e2.printStackTrace();
           }
        }
           
        // Fin lee servidores
        
        jTableServidores.setModel(modelo);//Vinculamos nuestro modelo a la tabla
        //TableColumn col = jTableServidores.getColumnModel().getColumn(0);
        jTableServidores.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTableServidores.setAutoCreateRowSorter(true);
        RowSorter sorter = new TableRowSorter(modelo);
        jTableServidores.setRowSorter(sorter);
        jTableServidores.getColumnModel().getColumn( 1 ).setCellEditor( jTableServidores.getDefaultEditor(Boolean.class) );
        jTableServidores.getColumnModel().getColumn( 1 ).setCellRenderer(jTableServidores.getDefaultRenderer(Boolean.class));
        //ordeno la tabla tomando en cuenta la columna cero
        jTableServidores.getRowSorter().toggleSortOrder(0);
        jTableServidores.getColumnModel().getColumn(0).setPreferredWidth(800);
        jTableServidores.getColumnModel().getColumn(1).setPreferredWidth(100);
        

        //---------------FIN TABLA---------------------------------------------
    }
    
    private void jButtonObtenerArchivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonObtenerArchivosActionPerformed
        String servidor;
        File archivo;
        //se limpian las tablas y CONSOLA INFORMATIVA
        limpiarTabla(jTableArchivos);
        limpiarTabla(jTableArchivosDestino);
        jTextAreaInfo.setText("");
        jButtonActualizar.setEnabled(false);
        //---------------INICIO TABLA Archivos a Copiar---------------------------------------------
        modelo2=new ModeloTabla2();
        modelo2.addColumn("Archivo Origen");
        modelo2.addColumn("FechaArchivo");
        //Verificar acceso a Servidores antes de continuar
        if (verificarAccesoServidores()==true)
        {
            //Busca los archivos a partir del procedimiento obtieneArchivosACopiar, el mismo es recursivo si hay  carpetas
            try {
                obtieneArchivosACopiar(RutaOrigen.getText(),"Obtener");
                }
            catch(Exception e){
               e.printStackTrace();
            }
           
            jTableArchivos.setModel(modelo2);//Vinculamos nuestro modelo a la tabla
            RowSorter sorter = new TableRowSorter(modelo2);
            jTableArchivos.setRowSorter(sorter);
            //ordeno la tabla tomando en cuenta la columna cero
            jTableArchivos.getRowSorter().toggleSortOrder(0);
            jTableArchivos.getColumnModel().getColumn(0).setPreferredWidth(1000);
            jTableArchivos.getColumnModel().getColumn(1).setPreferredWidth(200);
            //---------------FIN TABLA---------------------------------------------


            //---------------INICIO TABLA Archivos Destino--------------------------------------------
            if (verificaActualizacion()==0)//si el procedimiento anterior encontr√≥ archivos para actualizar 
            {
                jTextAreaInfo.append(System.getProperty("line.separator"));
                jTextAreaInfo.append("No existen Archivos para Actualizar, verifique por Favor");
                JOptionPane.showMessageDialog(this, "No existen Archivos para Actualizar",    
                 "Verificar", JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                modelo3=new ModeloTabla2();
                modelo3.addColumn("Archivo Destino");
                modelo3.addColumn("Existe Archivo");
                //Genera los Archivos a Copiar
                for (int i = 0; i < jTableServidores.getRowCount(); i++) 
                {
                    //Verifico si esta seleccionado el servidor para actualizar
                    if ((Boolean)jTableServidores.getValueAt(i,1).equals(true))
                        {servidor=(String) jTableServidores.getValueAt(i,0);
                        for (int i2 = 0; i2 < jTableArchivos.getRowCount(); i2++) 
                        {
                            archivosACopiar[0] = servidor.concat ((String) jTableArchivos.getValueAt(i2,0));
                            //Verificar si existe el archivo
                            archivo=new File(servidor.concat ((String) jTableArchivos.getValueAt(i2,0)));
                            if(archivo.exists()!=true)
                                {archivosACopiar[1] = "NO";}
                            else 
                                {
                                long lastModified = archivo.lastModified();
                                String pattern = "dd-MM-yyyy hh:mm aa";
                                SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
                                Date lastModifiedDate = new Date( lastModified );
                                archivosACopiar[1] = "SI -Actualizado al " + simpleDateFormat.format( lastModifiedDate );
                                //comparar fechas y poner en consola mensaje
                                Date fechaArcNuevo = null;
                                try {
                                    fechaArcNuevo = simpleDateFormat.parse((String) jTableArchivos.getValueAt(i2,1));
                                } catch (ParseException ex) {
                                    Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                try {
                                    lastModifiedDate=simpleDateFormat.parse((String)simpleDateFormat.format( lastModifiedDate ));
                                } catch (ParseException ex) {
                                    Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                //System.out.println(fechaArcNuevo);
                                //System.out.println(lastModifiedDate);
                                //System.out.println(lastModifiedDate.compareTo(fechaArcNuevo));
                                if(lastModifiedDate.after(fechaArcNuevo)==true)
                                    {
                                        //System.out.println("se reemplazar√° el archivo por uno + viejo OJOOO");
                                        jTextAreaInfo.append(System.getProperty("line.separator"));
                                        jTextAreaInfo.append("ATENCI√ìN! EL ARCHIVO " .concat(servidor.concat ((String) jTableArchivos.getValueAt(i2,0))).concat(" con fecha ".concat(simpleDateFormat.format( lastModifiedDate ) )).concat(" ser√° reemplazado por uno con fecha ").concat(simpleDateFormat.format( fechaArcNuevo ) ));
                                    }
                                }

                            modelo3.addRow(archivosACopiar);

                        }
                        }
                    else
                        {
                        jTextAreaInfo.append(System.getProperty("line.separator"));
                        jTextAreaInfo.append("No se actualizar√° el Servidor ".concat((String) jTableServidores.getValueAt(i,0) ));
                        }

                jTableArchivosDestino.setModel(modelo3);//Vinculamos nuestro modelo a la tabla
                jTableArchivosDestino.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                RowSorter sorter2 = new TableRowSorter(modelo3);
                jTableArchivosDestino.setRowSorter(sorter2);
                //ordeno la tabla tomando en cuenta la columna cero
                jTableArchivosDestino.getRowSorter().toggleSortOrder(0);
                jTableArchivosDestino.getColumnModel().getColumn(0).setPreferredWidth(1300);
                jTableArchivosDestino.getColumnModel().getColumn(1).setPreferredWidth(500);

                //---------------FIN TABLA---------------------------------------------
            }
            jButtonActualizar.setEnabled(true);// se podr√≠a actualizar
            this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_jButtonObtenerArchivosActionPerformed
    
        
        }//se cierra el if de verificarAccesoServidores
    else
        {
         jTextAreaInfo.append(System.getProperty("line.separator"));
         jTextAreaInfo.append("Por favor verifique el Acceso a todos los Servidores seleccionados, no es posible continuar");
        }
    }
    
    private void RutaOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RutaOrigenActionPerformed
        limpiarTabla(jTableArchivos);
        limpiarTabla(jTableArchivosDestino);
        jTextAreaInfo.setText("");
    }//GEN-LAST:event_RutaOrigenActionPerformed

    private void jButtonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarActionPerformed
        Date miFecha=new Date();
        String fechaHora=new SimpleDateFormat("dd-MM-yyyy HH: mm: ss.SSS").format(miFecha);
        if ( jTableArchivosDestino.getRowCount()!=0)
        {
            //se pide confirmaci√≥n para seguir
            
            int result = JOptionPane.showConfirmDialog(null,"Esta seguro de continuar con la Actualizaci√≥n? ", "Actualizaci√≥n de Servidores GTI",
               JOptionPane.YES_NO_OPTION,
               JOptionPane.QUESTION_MESSAGE);
            if(result == JOptionPane.NO_OPTION){
               this.setCursor(Cursor.getDefaultCursor());   
               return;
            }else if (result == JOptionPane.YES_OPTION){//sI SE SELECCION√ì SI
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                //Se obtiene el JIra
                String jira=obtieneJira(RutaOrigen.getText());
                //System.out.println(jira);
                //Se obtiene la Ruta en donde guardar la ejecuci√≥n de la actualizaci√≥n
                //Se defini√≥ que ser√≠a un nivel m√°s arriba que la carpeta del Jira, o sea, en el d√≠a
                String RutaEjecucion=RutaOrigen.getText();
                System.out.println(RutaEjecucion.replace(jira,""));
                try
                    {
                    fichero = new FileWriter(obtieneRutaIniciar ("RUTA LOG"),true);
                    //ficheroCorrida = new FileWriter(obtieneRutaIniciar ("RUTA EJECUCIONES").concat(jira).concat(" ").concat(fechaHora.replace(":","-")),true);
                    ficheroCorrida = new FileWriter(RutaEjecucion.replace(jira,"").concat(jira).concat(" ").concat(fechaHora.replace(":","-")),true);
                    pw = new PrintWriter(fichero);
                    pw2 = new PrintWriter(ficheroCorrida);
                    } 
                catch (IOException e) 
                    {
                        JOptionPane.showMessageDialog(null, "No se pudo abrir el archivo de Historial, verifique por favor ",  
                        "Verificar", JOptionPane.ERROR_MESSAGE);
                         this.setCursor(Cursor.getDefaultCursor());           
                         return;
                    }
                ////////////////////////////////////////////////////////////////////////////
                pw.println("*******INICIO DE ACTUALIZACION ".concat(fechaHora));
                pw.println("Ejecutado por: ".concat(System.getProperty("user.name")));
                pw.println("Ruta Origen: ".concat(RutaOrigen.getText()));
                pw.println("");
                //se copia todo lo de la consola al log
                pw.println("Mensajes Informativos");
                pw.println(jTextAreaInfo.getText());
                pw.println("");
                pw.println("Detalle de la Actualizaci√≥n");
            
                //Log Infividual
                pw2.println("*******INICIO DE ACTUALIZACION ".concat(fechaHora));
                pw2.println("Ejecutado por: ".concat(System.getProperty("user.name")));
                pw2.println("Ruta Origen: ".concat(RutaOrigen.getText()));
                pw2.println("");
                //se copia todo lo de la consola al log
                pw2.println("Mensajes Informativos");
                pw2.println(jTextAreaInfo.getText());
                pw2.println("");
                pw2.println("Detalle de la Actualizaci√≥n");
                obtieneArchivosACopiar(RutaOrigen.getText(),"Actualizar");
            
                //se cierra el archivo
                try {
                    if (null != fichero)
                    fichero.close();
                     }
                catch (IOException e2) {
                e2.printStackTrace();
                }
                try {
                    if (null != ficheroCorrida)
                    ficheroCorrida.close();
                     }
                catch (Exception e2) {
                e2.printStackTrace();
                }
                this.setCursor(Cursor.getDefaultCursor());
                JOptionPane.showMessageDialog(null, "Actualizaci√≥n Finalizada, puede ver el resultado en ".concat(RutaEjecucion.replace(jira,"").concat(jira).concat(" ").concat(fechaHora.replace(":","-"))),  
                        "Resultado", JOptionPane.INFORMATION_MESSAGE);
            }//SE CIERRA JOptionPane.YES_OPTION){//sI SE SELECCION√ì SI
        }
        
        
    }//GEN-LAST:event_jButtonActualizarActionPerformed

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        obtieneServidores(); //Carga la Tabla con los Servidores seg√∫n un archivo txt 
        jButtonActualizar.setEnabled(false);
    }//GEN-LAST:event_formWindowOpened

    private void jTableServidoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableServidoresMouseClicked
        //se limpian las tablas
        limpiarTabla(jTableArchivos);
        limpiarTabla(jTableArchivosDestino);
        jTextAreaInfo.setText("");
        jButtonActualizar.setEnabled(false);
    }//GEN-LAST:event_jTableServidoresMouseClicked

    private void RutaOrigenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_RutaOrigenFocusGained
        limpiarTabla(jTableArchivos);
        limpiarTabla(jTableArchivosDestino);
        jTextAreaInfo.setText("");
        jButtonActualizar.setEnabled(false);
    }//GEN-LAST:event_RutaOrigenFocusGained

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventanaPrincipal().setVisible(true);
            }
        });
    }

private void obtieneArchivosACopiar (String ruta, String origen){
//System.out.println("Directorio........................" + ruta);
File dir = new File(ruta);
String[] ficheros = dir.list();
if (ficheros == null)
       {
            //System.out.println("No hay ficheros en el directorio especificado");
            jTextAreaInfo.append(System.getProperty("line.separator"));
            jTextAreaInfo.append("No se encuentra el directorio especificado: ".concat(RutaOrigen.getText()));
            JOptionPane.showMessageDialog(this, "No se encuentra el directorio especificado: ".concat(RutaOrigen.getText()),
                                "Verificar", JOptionPane.ERROR_MESSAGE);
             this.setCursor(Cursor.getDefaultCursor());           
       }
else 
       {  
       for (String nameFile : ficheros) 
            {    
                if (origen=="Obtener")
                    {verificarNivel (ruta+  "\\" +nameFile);}
                else
                    {actualizarNivel(ruta+  "\\" +nameFile);}           
            }
        }   
    
}

private void verificarNivel (String nombre){
    File nivel = new File(nombre);
    String ArchivoSinOrigen;
    //System.out.println(RutaOrigen.getText()+  "\\" +nameFile);
    if(nivel.isFile())
        {
        //System.out.println("archivo def " + nombre);
        //sacar la parte de la Ruta del Jira
        ArchivoSinOrigen=nombre.replace(RutaOrigen.getText(), "");
        //Se verifica que no sea un archivo . ini
        if (ArchivoSinOrigen.substring(1).toUpperCase().equals("ESPECIFICACIONES.INI"))
            {System.out.println(ArchivoSinOrigen.substring(1));}
        else
            {archivos[0] = ArchivoSinOrigen;
            //obtenemos fecha ult modif del archivo
            long lastModified = nivel.lastModified();
            String pattern = "dd-MM-yyyy hh:mm aa";
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
            Date lastModifiedDate = new Date( lastModified );
            archivos[1] = simpleDateFormat.format( lastModifiedDate );
            modelo2.addRow(archivos);
            }
        }
    else if(nivel.isDirectory())
    {
        //System.out.println("llama a Directorio " + nombre);
        ArchivoSinOrigen=nombre.replace(RutaOrigen.getText(), "");
        if (ArchivoSinOrigen.substring(1).toUpperCase().equals("DB") || ArchivoSinOrigen.substring(1).toUpperCase().equals("REPORTS"))
            {   System.out.println(ArchivoSinOrigen.substring(1));}
        else
            {obtieneArchivosACopiar(nombre,"Obtener");
            verificarCarpetaEnServidores(ArchivoSinOrigen);
            }
    }
}

private void actualizarNivel (String nombre){
    String servidor;
    File carpeta;
    String ArchivoSinOrigen;
    ArchivoSinOrigen=nombre.replace(RutaOrigen.getText(), "");
    File archivoServidor;
    File rutaServidor;
    carpeta=new File(nombre); //ser verifica con el archivo original
    //Se verifica si no se trata del archivo ini ni carpetas db y reports
    if (ArchivoSinOrigen.substring(1).toUpperCase().equals("DB") || ArchivoSinOrigen.substring(1).toUpperCase().equals("REPORTS") || ArchivoSinOrigen.substring(1).toUpperCase().equals("ESPECIFICACIONES.INI"))
            {   System.out.println(ArchivoSinOrigen.substring(1));}
    else
    {
    
        //por cada servidor deber√≠a crear las carpetas q sean necesarias
        for (int i = 0; i < jTableServidores.getRowCount(); i++) 
        {
            //Verifico si esta seleccionado el servidor para actualizar
            if ((Boolean)jTableServidores.getValueAt(i,1).equals(true))
                    {servidor=(String) jTableServidores.getValueAt(i,0);  
                    //System.out.println(nombre);
                    if(carpeta.isFile())
                        {
                        //Se obtiene la fecha de √∫ltima modificaci√≥n del Archivo Original
                        long lastModified = carpeta.lastModified();
                        String pattern = "dd-MM-yyyy hh:mm aa";
                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
                        Date lastModifiedDate = new Date( lastModified );
                        String fechaArchivoOrigen = simpleDateFormat.format( lastModifiedDate );    
                        //se debe crear otro archivo en base al original pero en el servidor
                        archivoServidor=new File(servidor.concat(ArchivoSinOrigen));
                        if(archivoServidor.exists()==true)
                            {//System.out.println("existe archivo");
                            try {
                                Path origenPath = Paths.get(carpeta.getPath());
                                Path destinoPath = Paths.get(archivoServidor.getPath());
                                //sobreescribir el fichero de destino si existe y lo copia
                                Files.copy(origenPath, destinoPath, StandardCopyOption.REPLACE_EXISTING);
                                pw.println("se reemplaz√≥ el archivo   ".concat(archivoServidor.getAbsolutePath()).concat(" Nueva Fecha de Modificaci√≥n: ".concat(fechaArchivoOrigen)));
                                pw2.println("se reemplaz√≥ el archivo   ".concat(archivoServidor.getAbsolutePath()).concat(" Nueva Fecha de Modificaci√≥n: ".concat(fechaArchivoOrigen)));
                                } 
                            catch (FileNotFoundException ex) {
                                //LOGGER.log(Level.SEVERE, ex.getMessage());
                                JOptionPane.showMessageDialog(this, "No se encuentra el directorio especificado: ",
                                "Verificar", JOptionPane.ERROR_MESSAGE);
                                pw.println("No se encuentra el directorio especificado: ".concat(archivoServidor.getAbsolutePath()));
                                pw2.println("No se encuentra el directorio especificado: ".concat(archivoServidor.getAbsolutePath()));
                                } 
                            catch (IOException ex) {
                                //LOGGER.log(Level.SEVERE, ex.getMessage());
                                System.err.println(ex);
                                JOptionPane.showMessageDialog(this, "ERROR: ".concat(ex.getMessage()),
                                "Verificar", JOptionPane.ERROR_MESSAGE);
                                pw.println("ERROR: " .concat(ex.getMessage().concat(archivoServidor.getAbsolutePath())));
                                pw2.println("ERROR: " .concat(ex.getMessage().concat(archivoServidor.getAbsolutePath())));
                                }
                            }
                        else// si no existe el archivo en el Servidor
                            {
                            try { 
                                    //if(archivoServidor.createNewFile())--se coment√≥ oxq creaba un archivo vac√≠o
                                    //{System.out.println("Se cre√≥ un archivo");
                                    Path origenPath = Paths.get(carpeta.getPath());
                                    Path destinoPath = Paths.get(archivoServidor.getPath());
                                    //sobreescribir el fichero de destino si existe y lo copia
                                    Files.copy(origenPath, destinoPath, StandardCopyOption.COPY_ATTRIBUTES);
                                    pw.println("se cre√≥ el archivo   ".concat(archivoServidor.getAbsolutePath()).concat(" con Fecha de Modificaci√≥n: ".concat(fechaArchivoOrigen)));
                                    pw2.println("se cre√≥ el archivo   ".concat(archivoServidor.getAbsolutePath()).concat(" con Fecha de Modificaci√≥n: ".concat(fechaArchivoOrigen)));
                                } 
                            catch (IOException ex) 
                                {
                                Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                                pw.println("no se pudo crear el archivo   ".concat(archivoServidor.getAbsolutePath()));
                                pw2.println("no se pudo crear el archivo   ".concat(archivoServidor.getAbsolutePath()));
                                }
                            }
                        }
                    else if(carpeta.isDirectory())
                        {
                        //se debe crear otro  Directorio en base al original pero en el servidor
                        rutaServidor=new File(servidor.concat(ArchivoSinOrigen));
                        if(rutaServidor.exists()!=true)//si no existe el Directorio en el Servidor
                            {
                            if (rutaServidor.mkdir())  //se crea la ruta. Si se ha creado correctamente
                                {//System.out.println("Directorio creado");
                                pw.println("se cre√≥ el Directorio   ".concat(rutaServidor.getAbsolutePath()));
                                pw2.println("se cre√≥ el Directorio   ".concat(rutaServidor.getAbsolutePath()));
                                }
                            }
                        //obtieneArchivosACopiar(nombre,"Actualizar");
                        }
                    }

        }//cierra el for de Servidores
        //si se trataba de un directorio se debe obtener lo contenido dentro de ese Directorio
        if(carpeta.isDirectory())
            {obtieneArchivosACopiar(nombre,"Actualizar");}
    
    }
 }

private void verificarCarpetaEnServidores (String nombre){
//
String servidor;
File carpeta;
for (int i = 0; i < jTableServidores.getRowCount(); i++) 
    {
     //Verifico si esta seleccionado el servidor para actualizar
     if ((Boolean)jTableServidores.getValueAt(i,1).equals(true))
        {servidor=(String) jTableServidores.getValueAt(i,0);  
        carpeta=new File(servidor.concat(nombre));
        if(carpeta.exists()!=true)
            {
            //System.out.println("no existe la Carpeta ".concat(servidor.concat(nombre)));
            jTextAreaInfo.append(System.getProperty("line.separator"));
            jTextAreaInfo.append("no existe la Carpeta ".concat(servidor.concat(nombre)));
            }
        }
    }
}
private int verificaActualizacion (){
    int imprimir=0;
    if ( jTableArchivos.getRowCount()==0)
        {return imprimir;}
    else 
        {imprimir=1;}
    return imprimir;
}

public void limpiarTabla(JTable tabla){
        int filas=tabla.getRowCount();
        int col=tabla.getColumnCount();
        //System.out.println(modelo.getRowCount());
        if (filas>0 && col>0){
            try {
                for (int i = 0;filas>i; i++) {
                    if (tabla==jTableArchivos)
                        {modelo2.removeRow(0);}
                    if (tabla==jTableArchivosDestino)
                        {modelo3.removeRow(0);}
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al limpiar la tabla.");
            }
        }
    }

private Boolean verificarAccesoServidores()
{  Boolean continuar = null;
    String rutaVerifServidores=obtieneRutaIniciar ("RUTA PARA VERIFICAR SERVIDORES"); //RUTA PARA VERIFICAR SERVIDORES
    for (int i = 0; i < jTableServidores.getRowCount(); i++) 
        {
         //Verifico si esta seleccionado el servidor para actualizar
        if ((Boolean)jTableServidores.getValueAt(i,1).equals(true))
            {
                String ServidorMasRuta=((String)jTableServidores.getValueAt(i,0)).concat(rutaVerifServidores);
                File Servidor=new File(ServidorMasRuta);
                if(Servidor.exists()==true)
                    {continuar = true;
                    //JOptionPane.showMessageDialog(null, "SERVIDOR".concat(Servidor.getAbsolutePath()),  
                    //"Resultado", JOptionPane.INFORMATION_MESSAGE);
                    }
                else{
                     continuar = false; 
                     JOptionPane.showMessageDialog(null, " no se puede acceder al Servidor".concat(Servidor.getAbsolutePath()),  
                    "Verifique acceso", JOptionPane.INFORMATION_MESSAGE);
                     return continuar;
                     
                    }
            }
        }
    return continuar;
}       

private String obtieneRutaIniciar (String buscar )
{
    File archivo = null;
    FileReader fr = null;
    BufferedReader br = null;
    String ruta="";
    char caract ='@';
    try {
        // Apertura del fichero y creacion de BufferedReader para poder
        // hacer una lectura comoda (disponer del metodo readLine()).
        //archivo = new File ( "D:/ActualizaServidores/rutas.txt");
        archivo=new File("//SERVERPROD/Produccion2/OPERADORES/PASES A PRODUCCION/ActualizaServidores/rutas.txt");
        //System.out.println(archivo);
        fr = new FileReader (archivo);
        br = new BufferedReader(fr);
        // Lectura del fichero
        String linea;
        int encuentra=0;
        while((linea=br.readLine())!=null)
            { //System.out.println(linea);
            encuentra=linea.indexOf(buscar);
            if (encuentra!=-1)
            {
                //System.out.println(br.readLine());
                //System.out.println(encuentra);
                encuentra=linea.lastIndexOf(caract) ;
                ruta=linea.substring(encuentra +1 );
            }
            }
        }
        catch(Exception e){
           e.printStackTrace();
        }finally{
           // En el finally cerramos el fichero, para asegurarnos
           // que se cierra tanto si todo va bien como si salta 
           // una excepcion.
           try{
              if( null != fr ){
                 fr.close();
              }
           }catch (Exception e2){
              e2.printStackTrace();
           }
        }
    
    return ruta;
}    

private String obtieneJira (String buscar )
{
    String jira="";
    String caract ="\\";
    try {
        int encuentra=0;
        //System.out.println(caract);
        //  System.out.println(buscar);
        encuentra=buscar.indexOf(caract);
        if (encuentra!=-1)
            {
                encuentra=buscar.lastIndexOf(caract) ;
                jira=buscar.substring(encuentra +1 );
                //System.out.println(encuentra);
                //System.out.println(jira);
            }
        }
        catch(Exception e){
           e.printStackTrace();
        }
    
    return jira;
}    

   
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField RutaOrigen;
    private javax.swing.JButton jButtonActualizar;
    private javax.swing.JButton jButtonObtenerArchivos;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTableArchivos;
    private javax.swing.JTable jTableArchivosDestino;
    private javax.swing.JTable jTableServidores;
    private javax.swing.JTextArea jTextAreaInfo;
    // End of variables declaration//GEN-END:variables
}
